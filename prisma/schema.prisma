generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id
  name String
}

model appoinment {
  id              String            @id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  doctorId        String
  userId          String
  bookingDate     String
  gender          userGender
  age             Int
  weight          Int
  bloodGroup      String
  serialNo        Int
  slatTime        String
  patientProblem  String
  report          String
  address         String
  status          appointmentStatus @default(Pending)
  serviceId       String
  doctors         doctors           @relation(fields: [doctorId], references: [id])
  doctor_service  doctor_service    @relation(fields: [serviceId], references: [id])
  users           users             @relation(fields: [userId], references: [id])
  meeting_request meeting_request[]
  prescriptions   prescriptions[]
}

model blood_donors {
  id                  String          @id
  total_donnet        Int             @default(0)
  last_donnet_date    String?
  reward              Int             @default(0)
  user_id             String          @unique
  createdAt           DateTime        @default(now())
  updatedAt           DateTime
  totalPendingRequest Int             @default(0)
  users               users           @relation(fields: [user_id], references: [id])
  donor_request       donor_request[]
  donor_review        donor_review[]

  @@map("blood-donors")
}

model company_balance {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  balance   Int
}

model doctor_service {
  id                    String                  @id
  doctorId              String
  title                 String
  price                 String
  avatar                String
  aboutSerivce          String
  serviceType           String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  serviceDay            String[]
  category              String
  appoinment            appoinment[]
  doctors               doctors                 @relation(fields: [doctorId], references: [id])
  doctor_service_offer  doctor_service_offer?
  doctor_service_review doctor_service_review[]
  doctor_service_salt   doctor_service_salt?
  google_meet           google_meet[]
  payment               payment[]
}

model doctor_service_offer {
  id             String                   @id
  serviceId      String?                  @unique
  offerTitle     String
  promoCode      String
  discount       Int
  expireDate     String
  status         doctorServiceOfferStatus @default(Active)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime
  doctorId       String
  doctors        doctors                  @relation(fields: [doctorId], references: [id])
  doctor_service doctor_service?          @relation(fields: [serviceId], references: [id])
}

model doctor_service_review {
  id             String          @id
  serviceId      String?
  userId         String
  comment        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  doctor_service doctor_service? @relation(fields: [serviceId], references: [id])
  users          users           @relation(fields: [userId], references: [id])
}

model doctor_service_salt {
  id             String         @id
  serviceId      String         @unique
  startTime      String
  endTime        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  duration       String
  salt           String[]
  doctor_service doctor_service @relation(fields: [serviceId], references: [id])
}

model doctors {
  id                   String                 @id
  total_patient        Int                    @default(0)
  balance              Int                    @default(0)
  user_id              String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  experience           String
  specialist           String
  degree               String                 @default("Doctor of Medicine (M.D.)")
  appoinment           appoinment[]
  doctor_service       doctor_service[]
  doctor_service_offer doctor_service_offer[]
  users                users                  @relation(fields: [user_id], references: [id])
  google_meet          google_meet[]
  meeting_request      meeting_request[]
  payment              payment[]
  prescriptions        prescriptions[]
  withdraw             withdraw[]
}

model donor_request {
  id               String             @id
  userId           String
  donorId          String
  status           DonorRequestStatus @default(Pending)
  location         String
  pratienCondition String
  phone            String
  donnetDate       String
  quantity         Int
  blood_donors     blood_donors       @relation(fields: [donorId], references: [id])
  users            users              @relation(fields: [userId], references: [id])
}

model donor_review {
  id           String       @id
  donorId      String
  userId       String
  comment      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  blood_donors blood_donors @relation(fields: [donorId], references: [id])
  users        users        @relation(fields: [userId], references: [id])
}

model education {
  id             String        @id
  institute      String
  pass_year      String
  GPA            String
  completionYear String
  profile_id     String
  user_profiles  user_profiles @relation(fields: [profile_id], references: [id])
}

model google_meet {
  id              String            @id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  serviceId       String
  meetLink        String
  status          meetingEnumStatus @default(Active)
  doctorId        String
  doctors         doctors           @relation(fields: [doctorId], references: [id])
  doctor_service  doctor_service    @relation(fields: [serviceId], references: [id])
  meeting_request meeting_request[]

  @@map("google-meet")
}

model healtReport {
  id             String        @id
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  prescriptionId String
  testName       String
  description    String
  prescriptions  prescriptions @relation(fields: [prescriptionId], references: [id])
}

model medicine {
  id             String        @id
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  prescriptionId String
  durgName       String
  eatingTime     String[]
  duration       String
  advice         String
  eat            String
  prescriptions  prescriptions @relation(fields: [prescriptionId], references: [id])
}

model meeting_request {
  id            String      @id
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  meetingId     String
  userId        String
  appointmentId String
  phoneNumber   String
  serialNo      Int
  verifay       Boolean
  doctorId      String
  appoinment    appoinment  @relation(fields: [appointmentId], references: [id])
  doctors       doctors     @relation(fields: [doctorId], references: [id])
  google_meet   google_meet @relation(fields: [meetingId], references: [id])
  users         users       @relation(fields: [userId], references: [id])
}

model notifications {
  id         String   @id
  userId     String
  message    String
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  users      users    @relation(fields: [userId], references: [id])
}

model payment {
  id              String         @id
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  userId          String
  serviceId       String
  doctorId        String
  transactionId   String
  paymentType     String
  status          String         @default("Complete")
  price           Int
  discountedPrice Int            @default(0)
  doctors         doctors        @relation(fields: [doctorId], references: [id])
  doctor_service  doctor_service @relation(fields: [serviceId], references: [id])
  users           users          @relation(fields: [userId], references: [id])
}

model permanent_address {
  id             String        @id
  district       String
  sub_district   String
  police_station String?
  address        String
  profile_Id     String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  user_profiles  user_profiles @relation(fields: [profile_Id], references: [id])

  @@map("permanent-address")
}

model prescriptions {
  id            String                 @id
  createdAt     DateTime               @default(now())
  updatedAt     DateTime
  appointmentId String
  title         String
  userId        String
  submitDate    String
  advice        String
  doctorId      String
  status        PrescriptionEnumStatus @default(Pending)
  healtReport   healtReport[]
  medicine      medicine[]
  appoinment    appoinment             @relation(fields: [appointmentId], references: [id])
  doctors       doctors                @relation(fields: [doctorId], references: [id])
  users         users                  @relation(fields: [userId], references: [id])
}

model present_address {
  id             String        @id
  district       String
  sub_district   String
  police_station String?
  address        String
  profile_Id     String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  user_profiles  user_profiles @relation(fields: [profile_Id], references: [id])

  @@map("present-address")
}

model user_profiles {
  id                String             @id
  first_name        String
  last_name         String
  gender            String?
  date_of_birth     String?
  blood_group       String?
  phone             String?
  avatar            String
  cover             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  user_id           String             @unique
  user_name         String
  education         education[]
  permanent_address permanent_address?
  present_address   present_address?
  users             users              @relation(fields: [user_id], references: [id])

  @@map("user-profiles")
}

model users {
  id                    String                  @id
  email                 String
  password              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  role                  UserRole                @default(User)
  status                UserStatus              @default(Active)
  verified              UserVerification        @default(false)
  appoinment            appoinment[]
  blood_donors          blood_donors?
  doctor_service_review doctor_service_review[]
  doctors               doctors?
  donor_request         donor_request[]
  donor_review          donor_review[]
  meeting_request       meeting_request[]
  notifications         notifications[]
  payment               payment[]
  prescriptions         prescriptions[]
  user_profiles         user_profiles?
  withdraw              withdraw[]
}

model withdraw {
  id                       String             @id
  createdAt                DateTime           @default(now())
  updatedAt                DateTime
  doctorId                 String
  paymentReciveType        enumPaymentRecive
  number                   String
  bankName                 String?
  status                   WithdrawEnumStatus @default(Pending)
  withdrawAccptetManagerId String?
  amount                   Int
  finalAmonut              Int
  companyEarn              Int
  doctors                  doctors            @relation(fields: [doctorId], references: [id])
  users                    users?             @relation(fields: [withdrawAccptetManagerId], references: [id])
}

enum DonorRequestStatus {
  Pending
  Accepted
  Complete
  Cancel
}

enum PrescriptionEnumStatus {
  Pending
  Assing
  Complete
}

enum UserRole {
  User
  BloodDonor
  Doctor
  Manager
}

enum UserStatus {
  Active
  Pending
  Suspend
  Disabled
}

enum UserVerification {
  true
  false
  Pending
}

enum WithdrawEnumStatus {
  Pending
  Cancel
  Complete
}

enum appointmentStatus {
  Pending
  Accepted
  Complete
  Expired
  TestSebmit
}

enum doctorServiceOfferStatus {
  Active
  Expired
}

enum enumPaymentRecive {
  Bank
  Nogod
  Bikash
  MasterCard
  Paypal
}

enum meetingEnumStatus {
  Active
  Complete
  Expired
}

enum userGender {
  Male
  Female
  Other
}
