// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(uuid())
  name String
}

model User {
  id              String           @id @default(uuid())
  email           String
  password        String
  role            UserRole         @default(User)
  status          UserStatus       @default(Active)
  verified        UserVerification @default(false)
  bloodDonor      BloodDonor?
  doctor          Doctor?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  profile         Profile?
  donorRequests   DonorRequest[]
  notifications   Notification[]
  donorReviews    DonorReview[]
  ServiceReview   ServiceReview[]
  appointments    Appointment[]
  prescriptions   Prescription[]
  meetingRequests MeetingRequest[]
  payments        Payment[]
  Withdraw        Withdraw[]

  @@map("users")
}

// note donnet date type DateTime
model BloodDonor {
  id                  String         @id @default(uuid())
  total_donnet        Int            @default(0)
  last_donnet_date    String?
  reward              Int            @default(0)
  totalPendingRequest Int            @default(0)
  user_id             String         @unique
  user                User           @relation(fields: [user_id], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  donorRequests       DonorRequest[]
  donorReviews        DonorReview[]

  @@map("blood-donors")
}

model Doctor {
  id             String           @id @default(uuid())
  specialist     String
  degree         String           @default("Doctor of Medicine (M.D.)")
  experience     String
  total_patient  Int              @default(0)
  balance        Int              @default(0)
  user_id        String           @unique
  user           User             @relation(fields: [user_id], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  doctorServices DoctorService[]
  appointments   Appointment[]
  googleMeets    GoogleMeet[]
  payments       Payment[]
  withdraws      Withdraw[]
  prescription   Prescription[]
  meetingRequest MeetingRequest[]
  serviceOffer   ServiceOffer[]

  @@map("doctors")
}

model Profile {
  id                String            @id @default(uuid())
  user_name         String
  first_name        String
  last_name         String
  gender            String?
  date_of_birth     String?
  blood_group       String?
  phone             String?
  avatar            String
  cover             String?
  present_Address   PresentAddress?
  permanent_Address PermanentAddress?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  education         Education[]
  user_id           String            @unique
  user              User              @relation(fields: [user_id], references: [id])

  @@map("user-profiles")
}

model PresentAddress {
  id             String   @id @default(uuid())
  district       String
  sub_district   String
  police_station String?
  address        String
  profile_Id     String   @unique
  profile        Profile  @relation(fields: [profile_Id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("present-address")
}

model PermanentAddress {
  id             String   @id @default(uuid())
  district       String
  sub_district   String
  police_station String?
  address        String
  profile_Id     String   @unique
  profile        Profile  @relation(fields: [profile_Id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("permanent-address")
}

model Education {
  id             String  @id @default(uuid())
  institute      String
  pass_year      String
  GPA            String
  completionYear String
  profile_id     String
  profile        Profile @relation(fields: [profile_id], references: [id])
  // createdAt      DateTime @default(now())
  // updatedAt      DateTime @updatedAt

  @@map("education")
}

model DonorRequest {
  id               String             @id @default(uuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  donorId          String
  donor            BloodDonor         @relation(fields: [donorId], references: [id])
  status           DonorRequestStatus @default(Pending)
  location         String
  pratienCondition String
  phone            String
  donnetDate       String
  quantity         Int
  // createdAt        DateTime           @default(now())
  // updatedAt        DateTime           @updatedAt

  @@map("donor_request")
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  message    String
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

model DonorReview {
  id         String     @id @default(uuid())
  donorId    String
  bloodDonor BloodDonor @relation(fields: [donorId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  comment    String
  rating     Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("donor_review")
}

model DoctorService {
  id             String          @id @default(uuid())
  doctorId       String
  doctor         Doctor          @relation(fields: [doctorId], references: [id])
  title          String
  serviceDay     String[]
  category       String
  price          String
  avatar         String
  aboutSerivce   String
  serviceType    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  serviceSalt    ServiceSalt?
  serviceOffers  ServiceOffer[]
  serviceReviews ServiceReview[]
  appointments   Appointment[]
  GoogleMeet     GoogleMeet[]
  payments       Payment[]

  @@map("doctor_service")
}

model ServiceSalt {
  id        String         @id @default(uuid())
  serviceId String         @unique
  duration  String
  service   DoctorService? @relation(fields: [serviceId], references: [id])
  salt      String[]
  startTime String
  endTime   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("doctor_service_salt")
}

model ServiceOffer {
  id         String                   @id @default(uuid())
  serviceId  String?                  @unique
  service    DoctorService?           @relation(fields: [serviceId], references: [id])
  offerTitle String
  promoCode  String
  discount   Int
  expireDate String
  doctorId   String
  doctor     Doctor                   @relation(fields: [doctorId], references: [id])
  status     doctorServiceOfferStatus @default(Active)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt

  @@map("doctor_service_offer")
}

model ServiceReview {
  id        String         @id @default(uuid())
  service   DoctorService? @relation(fields: [serviceId], references: [id])
  serviceId String?
  rating    Int
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("doctor_service_review")
}

model Appointment {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  bookingDate     String
  gender          userGender
  age             Int
  price           String            @default("0")
  weight          Int
  bloodGroup      String
  serialNo        Int
  slatTime        String
  patientProblem  String
  report          String?
  address         String
  serviceId       String
  service         DoctorService     @relation(fields: [serviceId], references: [id])
  status          appointmentStatus @default(Pending)
  prescriptions   Prescription[]
  meetingRequests MeetingRequest[]

  @@map("appoinment")
}

model Prescription {
  id            String                 @id @default(uuid())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  appointmentId String
  appointment   Appointment            @relation(fields: [appointmentId], references: [id])
  title         String
  userId        String
  user          User                   @relation(fields: [userId], references: [id])
  submitDate    String
  advice        String
  doctorId      String
  doctor        Doctor                 @relation(fields: [doctorId], references: [id])
  status        PrescriptionEnumStatus @default(Pending)
  medicines     Medicine[]
  healtReports  HealtReport[]

  @@map("prescriptions")
}

model Medicine {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  durgName       String
  eatingTime     String[]
  duration       String
  advice         String
  eat            String

  @@map("medicine")
}

model HealtReport {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  testName       String
  description    String

  @@map("healtReport")
}

model GoogleMeet {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  serviceId       String
  service         DoctorService     @relation(fields: [serviceId], references: [id])
  meetLink        String
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  status          meetingEnumStatus @default(Active)
  meetingRequests MeetingRequest[]

  @@map("google-meet")
}

model MeetingRequest {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  meetingId     String
  googleMeet    GoogleMeet  @relation(fields: [meetingId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  serialNo      Int
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  phoneNumber   String
  verifay       Boolean

  @@map("meeting_request")
}

model Payment {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  serviceId       String
  service         DoctorService @relation(fields: [serviceId], references: [id])
  doctorId        String
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  price           Int
  transactionId   String
  discountedPrice Int           @default(0)
  paymentType     String
  status          String        @default("Complete")

  @@map("payment")
}

model Withdraw {
  id                       String             @id @default(uuid())
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  doctorId                 String
  doctor                   Doctor             @relation(fields: [doctorId], references: [id])
  amount                   Int
  paymentReciveType        enumPaymentRecive
  number                   String
  bankName                 String?
  status                   WithdrawEnumStatus @default(Pending)
  finalAmonut              Int
  companyEarn              Int
  withdrawAccptetManagerId String?
  user                     User?              @relation(fields: [withdrawAccptetManagerId], references: [id])

  @@map("withdraw")
}

model CompanyBalance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance   Int

  @@map("company_balance")
}

enum WithdrawEnumStatus {
  Pending
  Cancel
  Complete
}

enum enumPaymentRecive {
  Bank
  Nogod
  Bikash
  MasterCard
  Paypal
}

enum meetingEnumStatus {
  Active
  Complete
  Expired
  Cancel
}

enum PrescriptionEnumStatus {
  Pending
  Assing
  Complete
}

enum appointmentStatus {
  Pending
  Accepted
  Complete
  Expired
  Reject
  TestSebmit
  Cancel
}

enum userGender {
  Male
  Female
  Other
}

enum doctorServiceOfferStatus {
  Active
  Expired
}

enum DonorRequestStatus {
  Pending
  Accepted
  Completed
  Cancel
}

enum UserRole {
  User
  BloodDonor
  Doctor
  Admin
}

enum UserStatus {
  Active
  Pending
  Suspend
  Disabled
}

enum UserVerification {
  true
  false
  Pending
}
